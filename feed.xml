<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Li Lejia's blog</title>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://lejia.li/feed.xml" />
<link rel="alternate" type="text/html" href="http://lejia.li" />
<updated>2014-07-10T16:18:16+08:00</updated>
<id>http://lejia.li/</id>
<author>
  <name>Li Lejia</name>
  <uri>http://lejia.li/</uri>
  <email>leelejia@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[用Jekyll与Github.io来搭建个人博客]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/blog/2014/07/04/Jekyll-and-github/" />
  <id>http://lejia.li/blog/2014/07/04/Jekyll-and-github</id>
  <published>2014-07-04T01:02:00+08:00</published>
  <updated>2014-07-04T01:02:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;jekyllgithubio&quot;&gt;用Jekyll与Github.io来搭建个人博客&lt;/h2&gt;

&lt;p&gt;下班完折腾折腾，九点钟边看着一百七十多分钟的《音乐之声》边开始了博客的迁移，现在真的没有比Jekyl+github.io更方便的了吧，Wordpress从来没有觉得顺畅过，当然，最关键的是github.io不需要和Linux打交道，纯静态页面。&lt;/p&gt;

&lt;p&gt;现在开始：&lt;/p&gt;

&lt;p&gt;没有gem的先安装gem，gem怎么安装的在&lt;a href=&quot;https://rubygems.org/pages/download&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;三条命令你就能看到你本地的Jekyllrb了：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gem install jekyll
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll new myblog
~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;myblog
~/myblog &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll serve
&lt;span class=&quot;c&quot;&gt;# =&amp;gt; Now browse to http://localhost:4000&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;在你自定义的myblog文件夹里，目录应该差不多类似下面：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;├── _config.yml
├── _drafts
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   ├── begin-with-the-crazy-ideas.textile
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   └── on-simplicity-in-technology.markdown
├── _includes
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   ├── footer.html
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   └── header.html
├── _layouts
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   ├── default.html
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   └── post.html
├── _posts
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   └── 2009-04-26-barcamp-boston-4-roundup.textile
├── _data
&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;   └── members.yml
├── _site
└── index.html&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;这些文件与文件夹分别代表的是：&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;文件/文件夹&lt;/th&gt;
      &lt;th&gt;内容&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;_config.yml&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;包含所有的配置数据，许多选项都可以执行命令行来设置，不过在这个文件里设置能让你少记一些东西&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;_drafts&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;文件夹里包含还没有发布的博文，这些文件的名字一般都没有包含日期：&lt;code&gt;title.MARKUP&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;_includes&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;包含页面共用的头首侧边栏什么的&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;_layouts&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;博文页面的模板&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;_posts&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这些就是你的博文啦&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;_data&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;对于Ruby来说，一些固定格式的网站数据可以放到这，jekyll引擎将会自动加载这个文件夹里的&lt;code&gt;.yml&lt;/code&gt;和&lt;code&gt;.yaml&lt;/code&gt;文件，如果文件名是&lt;code&gt;members.yml&lt;/code&gt;，那么你可以通过&lt;code&gt;site.data.members&lt;/code&gt;来访问这个数据&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;_site&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;这个是生成的站点文件防止的地方，这个文件夹刚好也可以是你的git文件夹&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;index.html&lt;/code&gt;或者其他&lt;/td&gt;
      &lt;td&gt;都会被Jekyll转换&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code&gt;其他文件与文件夹&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;其他的一些CSS文件或者图片文件都会直接复制过去。&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;另外在配置文件里还有&lt;a href=&quot;http://jekyllrb.com/docs/configuration/&quot;&gt;很多选项&lt;/a&gt;可以设置，不过暂时还没有关心的必要。&lt;/p&gt;

&lt;p&gt;接下来是比较关乎日常写博客的内容，我们从Front-matter开始，任何一个有如下YAML Front-matter头格式的文件，将会被Jekyll做特殊处理:
&lt;code&gt;
---
layout: post
title: Blogging Like a Hacker
---
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;front-matter&quot;&gt;以下是你会常用到的Front-matter选项：&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;变量&lt;/th&gt;
      &lt;th&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;layout&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;就是你在&lt;code&gt;_layout&lt;/code&gt;里面有设置的排版，自带的有&lt;code&gt;default&lt;/code&gt;, &lt;code&gt;post&lt;/code&gt;, &lt;code&gt;page&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;permalink&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果你不希望博文的链接是&lt;code&gt;/year/month/day/title.html/&lt;/code&gt;你可以主动设置博文的永久链接&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;published&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;如果你在生成站点的时候不想发表这篇文章，你可以把这个属性设置成false&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;category&lt;/code&gt; &lt;code&gt;categories&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;相当于文章的&lt;code&gt;tag&lt;/code&gt;、分类或者文件夹&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;code&gt;tags&lt;/code&gt;&lt;/td&gt;
      &lt;td&gt;其实都差不多&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;section-1&quot;&gt;开始撰写博客&lt;/h2&gt;


  &lt;p&gt;&lt;a href=&quot;http://lejia.li/blog/2014/07/04/Jekyll-and-github/&quot;&gt;用Jekyll与Github.io来搭建个人博客&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on July 04, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[NSFilemanager的线程安全性]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/experiences/blog/2014/06/22/nsfilemanager-thread/" />
  <id>http://lejia.li/experiences/blog/2014/06/22/nsfilemanager-thread</id>
  <published>2014-06-22T10:47:00+08:00</published>
  <updated>2014-06-22T10:47:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;如官方文档所说：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The methods of the shared NSFileManager object can be called from multiple threads safely. However, if you use a delegate to receive notifications about the status of move, copy, remove, and link operations, you should create a unique instance of the file manager object, assign your delegate to that object, and use that file manager to initiate your operations.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;In iOS and Mac OS X v 10.5 and later you should consider using [[NSFileManager alloc] init] rather than the singleton method defaultManager. Instances ofNSFileManager are considered thread-safe when created using [[NSFileManager alloc] init].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code&gt;[NSFileManager defautManager]&lt;/code&gt;不是线程安全的，但是&lt;code&gt;[[NSFileManager alloc] init]&lt;/code&gt;是线程安全的，为了安全起见，不如全部用后者。&lt;/p&gt;

&lt;p&gt;PS：这和&lt;code&gt;NSManagedObjectContext&lt;/code&gt;其实是差不多的。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lejia.li/experiences/blog/2014/06/22/nsfilemanager-thread/&quot;&gt;NSFilemanager的线程安全性&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on June 22, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Objective-C里@public、@protected和@private更深一点点的区别]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/experiences/blog/2014/06/21/Objc-public-protected-private/" />
  <id>http://lejia.li/experiences/blog/2014/06/21/Objc-public-protected-private</id>
  <published>2014-06-21T23:52:00+08:00</published>
  <updated>2014-06-21T23:52:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;感觉其实很多语法书里也不会讲得那么详尽，或者大家自然而然的以为这三个属性和C++里的无甚区别，其实不然。&lt;/p&gt;

&lt;p&gt;首先，一致的是，对于拥有这些属性变量的类&lt;code&gt;TestClass&lt;/code&gt;：&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@public&lt;/code&gt; 表示任何其他类可以访问这个变量。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@protected&lt;/code&gt; 表示只有子类可以访问这个变量。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;@private&lt;/code&gt; 表示任何其他类不能访问这个变量。&lt;/p&gt;

&lt;p&gt;如果不标注，默认所有变量都是&lt;code&gt;@protected&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如果你对C++也不怎么熟悉（比如我），初看，你会觉得&lt;code&gt;@public&lt;/code&gt;和&lt;code&gt;@protected&lt;/code&gt;没有什么区别，因为一般在ObjC里，如果须要设置外部类要访问的变量，我们习惯把变量直接用@property和@synthesize直接生成get和set方法，但是其实ObjC还可以用指针-&amp;gt;访问这些变量，这些语法可能延续自Smalltalk的习惯（待查证，不过注意Smalltalk可比C++老十几年，这是乔布斯从&lt;a href=&quot;http://zh.wikipedia.org/wiki/Xerox_PARC&quot;&gt;Xerox PARC&lt;/a&gt;偷来的两样东西之一，另一个东西是图形界面）。&lt;/p&gt;

&lt;p&gt;例如以下代码，你可以尝试写入Xcode，不用编译，你就能意识到区别。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestClass&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@protected&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protectedNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@private&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;privateNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@public&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publicNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestClass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestChildClass&lt;/span&gt; : &lt;span class=&quot;nc&quot;&gt;TestClass&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestChildClass&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]){&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;protectedNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OtherClass&lt;/span&gt; : &lt;span class=&quot;bp&quot;&gt;NSObject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@implementation&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OtherClass&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;testMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;TestChildClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestChildClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publicNumber&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&amp;quot;test number value is:%d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publicNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;另外，如果你熟悉ObjC的runtime编程，访问过isa的struct，你应该早就明白了。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lejia.li/experiences/blog/2014/06/21/Objc-public-protected-private/&quot;&gt;Objective-C里@public、@protected和@private更深一点点的区别&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on June 21, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[苹果盘子有多大？——从iOS/OS X技术细节看苹果的产品发展方向]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/blog/2014/06/07/from-api-to-apple-empire/" />
  <id>http://lejia.li/blog/2014/06/07/from-api-to-apple-empire</id>
  <published>2014-06-07T06:57:00+08:00</published>
  <updated>2014-06-07T06:57:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;相信许多开发者、业界人士甚至不少果粉都在6月3日凌晨熬夜看了苹果2014年WWDC Special Event的现场直播，无论是惊喜还是失望，WWDC作为一场开发者的大会，苹果终究只是在这次大会上给开发者带了新iOS与OS X测试版本、新的API与新的开发工具，没有传闻的iPhone 6，也没有Retina Macbook Air。&lt;/p&gt;

&lt;p&gt;除去一些新功能的细节，Tim Cook与Craig Federighi带给大家最重要的一个主题是Continuity。从现场发布会的内容来说，Continuity指的是iOS设备之间、OS X设备之间、iOS设备与OS X设备之间的使用连续性，你可以从一台苹果设备无缝地跳到另一个设备来完成同一个任务，能完成的任务暂时包括iOS系统内置的电话、短信、邮件等功能。&lt;/p&gt;

&lt;p&gt;看了直播或者视频，你会发现Tim和Craig是在用极其疯狂的速度串讲完了所有Keynote和Demo，丝毫不留给观众一些理解笑点的时间，基本丧失了演讲应有的戏剧性和节奏感，不是他们不想有，而是要讲的内容实在太多。而如果你是一位已经开始研究最新WWDC Session视频的苹果注册开发者，你会发现他们在两个小时内讲的这么多东西，完全只是冰山一角。&lt;/p&gt;

&lt;p&gt;在百余个WWDC Session中的What’s New in Cocoa Touch里，UIKit（iOS的整个视觉交互框架）的软件工程师Luke Hiesterman就开门见山地介绍了iOS 8的软件架构哲学与目标：Adaptivity，指的是iOS框架与开发者代码在不同设备之间的适用性。&lt;/p&gt;

&lt;p&gt;具体地来说，在iOS 8之前，当设备手持方向改变时，开发者需要根据设备的方向来具体判断，再完成不同的UI实现（长宽变化，如iPad相册在设备纵向时每行显示4栏，设备横向时每行显示5栏）；当同样的需求面对iPhone与iPad等不一样的设备，开发者需要根据设备类型来来具体判断，实现不同的视图展示内容、方式与动画（“设置”应用在iPhone上与iPad上的业务逻辑相同，但是展示方式不一样）；面对不同屏幕尺寸的设备，开发者还要分别实现与屏幕对应的字体大小、列表的高度与边距。但是面对以上这些繁琐问题，新的iOS 8都给出了统一的接口，让你用同一套代码就可以让同一功能在iPad和iPhone上无缝实现。&lt;/p&gt;

&lt;p&gt;而你会问，这又如何？以上的很多功能在iPad第一天出的时候就有考虑了，只是更优化了一些吧，但是，苹果其实给了更多。安装了XCode 6 Beta的开发者可能第一时间就发现了，模拟器里出现了两个新选项：Resizable iPhone和Resizable iPad，这两个模拟器能够让你在调试的时候，任意指定屏幕宽度或者高度（如图，同样的实现是只改了宽高），让你为同一套代码调试完全不同的任意宽高！前端开发者看到这应该笑了，这不就是Web开发里的响应式设计（Responsive Design）么！&lt;/p&gt;

&lt;p&gt;基于苹果为开发者提供的这类接口，大家的想象力可以任意发散：Resizable iPad屏幕再变大，即是Apple TV；Resizable iPhone再变大，便是5英寸、6英寸的iPhone；而Resizable iPhone变小，自然就是iWatch！这些iOS 8提供的新接口接口，让开发者用一套代码就可以覆盖所有的尺寸与设备！&lt;/p&gt;

&lt;p&gt;基于以上，再回顾一下OS X的一些新功能：你能用Macbook连着你的iPhone打电话、发短信，更能在Macbook上一键连接iPhone的3G/4G网络，即使你的iPhone在客厅而Macbook在书房。不过，苹果在发布会上的数据也说得很清楚，每10个iOS用户，才有1个OS X用户，以上的功能真的那么有必要、那么urgent么？当然不是，打电话、发短信与共享网络的Continuity当然完全是为了iWatch准备的！此外，苹果新推出的高性能游戏中间层Metal取代了OpenGL ES，让游戏画面的绘制更加靠近GPU，让游戏画质与复杂度又有了极大提升，这只是为了高分辨率iPad么？当然不止，还有一块更大的游戏终端蛋糕——Apple TV！到这里，你可以试想一下你与你的亲人在4K屏幕的Apple TV上Facetime时候的感觉了，iPhone与Apple TV同样会有超凡的Continuity特性，鬼知道那些天才的开发者能把这两个东西结合出什么样的鬼斧神工。&lt;/p&gt;

&lt;p&gt;以上，才是这次WWDC最让人惊叹的东西。&lt;/p&gt;

&lt;p&gt;而至此，你也应该不奇怪为什么苹果让Jonathan Ive同时担任硬件、软件的设计总裁，为什么让曾经只管OS X软件开发的Craig Federighi管理OS X和iOS两个团队—— Continuity And Adaptivity——现在与未来的所有苹果设备的无缝结合。&lt;/p&gt;

&lt;p&gt;而回到主题，从WWDC的技术细节管中窥豹苹果的长远战略，你更能理解罗马不是一天建成的，也更能发现那群聪明人的战略可不仅仅是建一座罗马城，而是罗马帝国。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;文章也发表在了&lt;a href=&quot;http://www.36kr.com/p/212674.html&quot;&gt;36kr&lt;/a&gt;。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lejia.li/blog/2014/06/07/from-api-to-apple-empire/&quot;&gt;苹果盘子有多大？——从iOS/OS X技术细节看苹果的产品发展方向&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on June 07, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Objective-C 在Category里添加Property的宏]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/blog/2013/11/08/category-property/" />
  <id>http://lejia.li/blog/2013/11/08/category-property</id>
  <published>2013-11-08T22:49:00+08:00</published>
  <updated>2013-11-08T22:49:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;因为Category里只能用@Dynamic 自己写getter和setter所以定义了一个宏，来直接生成这两个方法，From 这里&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define ADD_DYNAMIC_PROPERTY(PROPERTY_TYPE,PROPERTY_NAME,SETTER_NAME) \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;@dynamic PROPERTY_NAME ; \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;static char kProperty##PROPERTY_NAME; \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;- ( PROPERTY_TYPE ) PROPERTY_NAME \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{ \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;return ( PROPERTY_TYPE ) objc_getAssociatedObject(self, &amp;amp;(kProperty##PROPERTY_NAME ) ); \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;} \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;- (void) SETTER_NAME :( PROPERTY_TYPE ) PROPERTY_NAME \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;{ \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;objc_setAssociatedObject(self, &amp;amp;kProperty##PROPERTY_NAME , PROPERTY_NAME , OBJC_ASSOCIATION_RETAIN); \&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;} \&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Example: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;ADD_DYNAMIC_PROPERTY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

  &lt;p&gt;&lt;a href=&quot;http://lejia.li/blog/2013/11/08/category-property/&quot;&gt;Objective-C 在Category里添加Property的宏&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on November 08, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[GCD, Block, 与ARC的关系]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/blog/2013/04/23/GCD-block-arc/" />
  <id>http://lejia.li/blog/2013/04/23/GCD-block-arc</id>
  <published>2013-04-23T02:12:00+08:00</published>
  <updated>2013-04-23T02:12:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;调了一整天关于block的bug，终于窥探到了一些GCD, Block，ARC的关系，简单来说，为了iOS的用户界面更加流畅，苹果推出了更加底层的GCD，GCD是更加底层的C级别接口，为了实现回调，且为了与Obj-C代码更加兼容，自然也提出了类似于C语言函数指针而非函数指针的Block，但是gcd线程结束的不确定性，使block在异步调用时内存管理逻辑会非常复杂，从这个角度来说，苹果又为clang编译器推出了ARC，让编译器帮助你管理各种release；另一方面，也降低了很多初学者的学习成本与门槛，一箭N雕啊。&lt;/p&gt;

&lt;p&gt;别忘了，这三个特性都是iOS 4.0提出的，写下博客的时候，已经是6.1.3，我已经落后最先进思想两年多了。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lejia.li/blog/2013/04/23/GCD-block-arc/&quot;&gt;GCD, Block, 与ARC的关系&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on April 23, 2013.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[牛顿法的计算方法与实现]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/blog/2012/12/07/newtown-method/" />
  <id>http://lejia.li/blog/2012/12/07/newtown-method</id>
  <published>2012-12-07T16:58:00+08:00</published>
  <updated>2012-12-07T16:58:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;&lt;a href=&quot;http://zh.wikipedia.org/wiki/%E7%89%9B%E9%A1%BF%E6%B3%95&quot;&gt;牛顿法&lt;/a&gt;，是牛顿在十七世纪提出的在实数域与复数域上求近似方程解的方法。方法使用函数f(x）的泰勒级数的前面几项来寻找方程f(x) = 0的根。牛顿迭代法是求方程根的重要方法之一，其最大优点是在方程f(x) = 0的单根附近具有平方收敛，而且该法还可以用来求方程的重根、复根，此时线性收敛，但是可通过一些方法变成超线性收敛。（其实是最简单的高数了）。&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;计算：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;y=f(x)的近似根，也就是f(x)=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://m1.img.srcdd.com/farm4/2012/1207/16/AE67855D6EA2A968A4AC4C17EBA4B0BA85F79B253F274_300_214.GIF&quot; alt=&quot;Newtown&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;section-1&quot;&gt;解：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;1.	任取x=0附近一点x0，在曲线上的点为(x0, f(x0))
2.	x0点上的切线斜率为其倒数f&#39;(x0)，所以求得它的切线为 y=f&#39;(x0)x+f(x0)-f&#39;(x0)*x0
3.	切线与x轴的交点为 x1=(f&#39;(x0)*x0-f(x0))/f&#39;(x0)


所以，得到的关系为 Xn+1 = (f&#39;(Xn)*Xn-f(Xn))/f&#39;(Xn) = Xn - f(Xn)/f&#39;(Xn)  (可以证明，这个级数在什么条件下收敛)

所以，我们就可以利用这个关系算出一定精度下的X的解了。（BTW: Xn+1 = Xn - f(Xn)/f&#39;(Xn)  ==&amp;gt; f&#39;(Xn) =  f(Xn)/(Xn-Xn+1) ）
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-2&quot;&gt;例 1：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;计算value的平方根
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-3&quot;&gt;解：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;	假设其平方根sqrt = (value)^0.5，则问题等价于求 f(sqrt) = sqrt^2 - value  在 f(sqrt) = 0时的解。

   写为比较数学化的表达式即为 f(x) = x^2 - C   C为要开方的值

           f&#39;(x) = 2x

 所以此例中，根据之前推出的对应关系：Xn+1 = (f&#39;(Xn)*Xn-f(Xn))/f&#39;(Xn) = Xn - f(Xn)/f&#39;(Xn)，牛顿法的对应关系为 Xn+1  = Xn - (Xn^2 - C)/2Xn = Xn/2 + C/2Xn。

 所以，至此，既可以用这个对应关系，迭代计算，java代码如下：
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section-4&quot;&gt;练习 1：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;计算Value的任意次整数根 double root(int time, double xn0) （建议大家自己推一下，自己推完编码完就不会忘了）
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;section-5&quot;&gt;解：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;对应关系也为 Xn+1 = (f&#39;(Xn)*Xn-f(Xn))/f&#39;(Xn) = Xn - f(Xn)/f&#39;(Xn) 

 而n次方根，即为求 f(x) = x^n - C 在f(x) = 0的解。

相应的对应关系为 Xn+1 = 1/n((n-1)Xn + C/Xn^(n-1)) 

把n = 2带入，能得到与之前相同的结果  Xn+1 = 1/2(Xn+C/Xn)

所以n次方的代码类似的为：
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)||&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NaN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;verysmall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xn1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xn1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;xn1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xn1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xn0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;power&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xn1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xn1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;old&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verysmall&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xn1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;代码没仔细测，不知道会有什么不足的地方，请多指教。&lt;/p&gt;

&lt;h4 id=&quot;section-6&quot;&gt;练习 2：&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;任意X元X次方程的求解
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;

&lt;p&gt;这篇文章的idea其实是来自于王小波的&lt;a href=&quot;http://book.douban.com/subject/1418686/&quot;&gt;《红拂夜奔》&lt;/a&gt;里关于开平方机的制造，按照牛顿法分析，一个机械的开平方机似乎完全是可行的。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lejia.li/blog/2012/12/07/newtown-method/&quot;&gt;牛顿法的计算方法与实现&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on December 07, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[怎样学习一项知识]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/blog/2012/07/23/how-to-learn/" />
  <id>http://lejia.li/blog/2012/07/23/how-to-learn</id>
  <published>2012-07-23T15:07:00+08:00</published>
  <updated>2012-07-23T15:07:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;h3 id=&quot;section&quot;&gt;学习一项知识，必须问自己的三个重要问题：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1、它的本质是什么

2、它的第一原则是什么

3、它的知识结构是怎样的
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;学习和思考过程中经常问自己的几个问题：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1、你的问题到底是什么（提醒自己不要偏离问题）

2、到现在为止，我有了什么收获呢？（整理去学的东西）

3、设想自己正在将东西讲给别人听（能否讲出来是判断正确理解的最好办法）

4、设想需要讲个一个不懂的人听（迫使自己挖掘只是背后最本质、也是最简单的事情）

5、时常反省和注意自己的思维过程。尤其是遇到自己无法理解或者不能解决的问题的时候。重新理解问题，看看问题到底出现在了哪个环节。

6、养成反驳自己的习惯。难道这个一定成立么？

7、人的思维天生就是极易刘御表面来理解事物的。问自己：真的理解了么？？？
&lt;/code&gt;&lt;/pre&gt;


  &lt;p&gt;&lt;a href=&quot;http://lejia.li/blog/2012/07/23/how-to-learn/&quot;&gt;怎样学习一项知识&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on July 23, 2012.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[238 iOS App Performance Graphics and Animations阅读笔记：应用提高图像与动画性能的一些方法]]></title>
 <link rel="alternate" type="text/html" href="http://lejia.li/blog/2012/07/15/ios-app-performance/" />
  <id>http://lejia.li/blog/2012/07/15/ios-app-performance</id>
  <published>2012-07-15T14:25:00+08:00</published>
  <updated>2012-07-15T14:25:00+08:00</updated>
  <author>
    <name>Li Lejia</name>
    <uri>http://lejia.li</uri>
    <email>leelejia@gmail.com</email>
  </author>
  <content type="html">&lt;h2 id=&quot;ios-app-performance-graphics-and-animations&quot;&gt;238 iOS App Performance Graphics and Animations&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;UIImageView 是由CALayer, UIImage-&amp;gt;CGImage 构成的&lt;/p&gt;

    &lt;p&gt;CGImage 在加载的时候不会解码图像，只有在第一次用的时候才会解码图像。&lt;/p&gt;

    &lt;p&gt;所以，尽量用UIImageView 不要直接把图像画在 drawrect:&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Xcode 提前为PNG做了很多优化，包括：
    &lt;ul&gt;
      &lt;li&gt;Premultiply alpha, and byte-swap&lt;/li&gt;
      &lt;li&gt;Turn off some PNG compression modes&lt;/li&gt;
      &lt;li&gt;Allow concurrent docdoing of a single image&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现在 iOS设备已经对JPEG图像做了很多的优化工作，现在也是很快的了，但是不建议用JPEG用作UI的元素 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;不要用其他格式的图像！！！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code&gt;[UIImage imageNamed: ]&lt;/code&gt;将会Cache 图片在一个purgeable memory里&lt;/p&gt;

    &lt;p&gt;&lt;code&gt;[UIImage imageWithContentOfFile: ]&lt;/code&gt;不会Cache&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;当需要设置背景图片的时候，不要用：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;drawRect:&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;CGRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;rect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;drwaInRect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;blendMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kCGBlendModeNormal&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code&gt;可以用：
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objc&quot; data-lang=&quot;objc&quot;&gt;&lt;span class=&quot;n&quot;&gt;myView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;layer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;CGImage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;iOS 6新功能 myView.layer.drawAsynchronously = YES 对于一个view里有很多需要draw的内容来说，很有用，但是有时候会很差，需要用time profile验证以后再尝试 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在有很多绘图的应用中，1、用setNeedsDisplayInRect: 2、用巧用背景图&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;所有scrolling都需要 60 fps 小于 45用户依然能察觉&lt;/p&gt;

    &lt;p&gt;所以我们拥有的时间仅有： 16ms/frame &lt;/p&gt;

    &lt;p&gt;这个时候就要考虑优化功能是在GPU还是CPU了&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; * CGDrawing 和 imageIO 是CPU

 * 渲染系统并不每一帧都工作在CPU上

 * 渲染本身是在GPU上的

 * 可以用OpenGL ES instruments 上的device utilization查看GPU使用情况
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;如果是100%左右的，肯定是GPU&lt;/p&gt;

    &lt;p&gt;如果是16%之类的，就应该是CPU&lt;/p&gt;

    &lt;p&gt;如果是GPU，有一个 Core Animation instruments可以查看&lt;/p&gt;

    &lt;p&gt;在scrolling 的 16ms 中，我们需要做的是：&lt;/p&gt;

    &lt;pre&gt;&lt;code&gt; * calculate new scrolling position

 * Prepare and commit animation

 * Render frame
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;减少blending，blending就是经常需要多重画的&lt;/p&gt;

    &lt;p&gt;self.layer.shouldRasterize = YES&lt;/p&gt;

    &lt;p&gt;在Time profiler 里，如果有很多时间被浪费在了spring board 里，spring board实际是render server的所在，所以，结论应该是，应用里有太多的layer了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section&quot;&gt;最后的结论：&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;1、多在不同设备上测试动画、他们的区别可能在于GPU, CPU, Retina blabla

2、不同场景有不同的解决方法，到底是用drawRect? 还是用SubView？

3、测量、测试、迭代
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://m2.img.srcdd.com/farm5/d/2012/0715/14/FCA698286F77192F4EFA75F612578688_B500_900_500_315.JPEG&quot; alt=&quot;Image&quot; /&gt;&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://lejia.li/blog/2012/07/15/ios-app-performance/&quot;&gt;238 iOS App Performance Graphics and Animations阅读笔记：应用提高图像与动画性能的一些方法&lt;/a&gt; was originally published by Li Lejia at &lt;a href=&quot;http://lejia.li&quot;&gt;Li Lejia's blog&lt;/a&gt; on July 15, 2012.&lt;/p&gt;</content>
</entry>

</feed>
